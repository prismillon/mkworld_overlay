name: "deployment"

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test

      - name: Build release
        run: cargo build --release

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to prismillon registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push mkworld-overlay
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          tags: "${{ vars.REGISTRY_URL }}/app/mkworld-overlay:latest"
          cache-from: type=gha
          cache-to: type=gha

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #     - name: Deploy mkworld-overlay on cluster
  #       uses: actions-hub/kubectl@master
  #       env:
  #         KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
  #       with:
  #         args: rollout restart deployment -n mkworld-overlay mkworld-overlay
